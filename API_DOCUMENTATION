Introduction

The JournalHub API is an online journal platform designed to enable users to perform basic journaling functions, such as creating, reading, updating, and deleting (CRUD) their journal entries. It ensures that all journal entries are securely stored in the cloud, providing users with a safe and accessible way to manage their personal or professional journals. The API is intended for use by anyone who wants a simple and reliable journaling tool.

Architecture

The JournalHub API is structured around a modular architecture that promotes separation of concerns and scalability. The architecture is organized into several key components:

Controllers:

App Controller: Manages the initialization of the application and handles generic routes.
JournalEntries Controller: Handles all operations related to journal entries, including creating, reading, updating, and deleting entries. It ensures that entries are correctly associated with users and that access controls are enforced.
User Controller: Manages user-related operations, such as registration, profile management, and account deletion.
Auth Controller: Handles authentication and authorization processes, including user login, token generation, password resets, and token validation.

Models:
JournalEntry Model: Represents the structure of a journal entry within the database, including fields such as title, content, and visibility (public/private). It defines the relationships between entries and users.
User Model: Represents user information within the database, including fields such as full name, nickname, email, and password. It defines relationships with journal entries and manages user authentication data.

Utilities:
db.js: Manages the connection to the MongoDB database, ensuring that the API can efficiently read from and write to the database.
jwt.js: Provides functions for generating and verifying JSON Web Tokens (JWT), which are used for securing API routes and managing user sessions.
mailer.js: Handles the sending of emails, such as welcome emails, password reset instructions, and notifications for changes to user accounts.

Middleware:
Middleware functions are used throughout the application to handle tasks such as validating incoming requests, checking user authentication status, and logging application activity.

Database:
The application uses MongoDB as its primary data store, leveraging its document-based structure to manage user information and journal entries. MongoDBâ€™s flexible schema allows the API to efficiently handle various types of journal content and user data.

Security:
Security is a core focus of the JournalHub API. User passwords are hashed using bcrypt before being stored in the database. JWT tokens are used to manage user sessions, ensuring that only authenticated users can access or modify their data. Additionally, sensitive operations like password resets are secured through token-based authentication and validation.

Base URL: http://localhost:5000/.


2. Authentication
Overview: 
JournalHub uses JWT (JSON Web Token) for authentication. JWT is a secure and stateless authentication mechanism, allowing users to authenticate themselves once and then use the token for subsequent requests without having to re-authenticate.

Obtaining a Token
To authenticate a user and obtain a JWT, you need to send a POST request to the /api/user/login endpoint with the user's credentials (email and password). Upon successful authentication, the server will return a JWT, which must be included in the Authorization header of subsequent requests.
Ofcorse, the user First needs to be registered.

Registration
Endpoint: /api/user/register
Method: POST
Request Body: JSON object containing fullName, nickname, email, password.
Response: Success message or error details.

Login
Endpoint: /api/user/login
Method: POST
Request Body: JSON object containing email and password.
Response: JWT token or error message.

Logout
Endpoint: /api/user/logout
Method: POST
Headers: Authorization: Bearer <token>
Response: Success message or error details.

3. User Management
Get User Profile
Endpoint: /api/user/profile
Method: GET
Headers: Authorization: Bearer <token>
Response: User details or error message.

Update User Profile
Endpoint: /api/user/profile
Method: PUT
Headers: Authorization: Bearer <token>
Request Body: JSON object containing fields to update (fullName, nickname).
Response: Updated user details or error message.

Delete User Account (Deletes all user entries too)
Endpoint: /api/user/profile
Method: DELETE
Headers: Authorization: Bearer <token>
Response: Success message or error details.

Update Password
Endpoint: /api/user/profile/password
Method: PUT
Headers: Authorization: Bearer <token>
Request Body: JSON object containing password and newPassword.
Response: Success message or error details.

4. Journal Entries
Create Journal Entry
Endpoint: /api/journal-entries
Method: POST
Headers: Authorization: Bearer <token>
Request Body: JSON object containing title, content, and isPublic.
Response: Created journal entry details or error message.

Get Journal Entries by User ID
Endpoint: /api/journal-entries/user/
Method: GET
Headers: Authorization: Bearer <token>
Response: Array of journal entries or error message.

Update Journal Entry
Endpoint: /api/journal-entries/:entryId
Method: PUT
Headers: Authorization: Bearer <token>
Request Body: JSON object containing fields to update (title, content, isPublic).
Response: Updated journal entry or error message.

Delete Journal Entry
Endpoint: /api/journal-entries/:entryId
Method: DELETE
Headers: Authorization: Bearer <token>
Response: Success message or error details.

Get Public Journal Entries
Endpoint: /api/public/journal-entries
Method: GET
Response: Array of public journal entries or error message.

Search Journal Entries
Endpoint: /api/search/journal-entries
Method: GET
Headers: Authorization: Bearer <token>
Query Params: q (search term).
Response: Array of matching journal entries or error message.

5. Error Handling
Standard Error Responses: Describe the format of error messages, including statusCode, message, and possible causes.
Common Error Codes: List common HTTP status codes returned by the API (e.g., 400 Bad Request, 401 Unauthorized, 404 Not Found, 500 Internal Server Error).

6. Rate Limiting
Overview
JournalHub currently applies rate limiting only to password reset requests. This rate limit is implemented to prevent abuse and to enhance the security of user accounts.

Password Reset Request Limits: Users are limited to a certain number of password reset requests within a given time frame. This is designed to prevent automated attacks and reduce the risk of account compromise.

Rate Limit: [Specify the exact number if known, e.g., "5 requests per hour"].

No other rate limiting is applied across the API at this time. This may change in future updates to ensure the continued stability and security of the application.

7. Versioning
API Versioning
JournalHub does not currently implement versioning for its API. All requests are handled through the base URL without a version identifier.

Current State: The API is in its initial version, and all endpoints are accessible through the base URL

Future Considerations: In the future, API versioning might be introduced to allow for backward compatibility and smoother transitions when updating or deprecating features. This would likely involve including a version number in the URL path (e.g., /v1/api/journal-entries).

Security Considerations
Data Protection
JournalHub prioritizes the security of user data, especially sensitive information like passwords.

Password Storage: All passwords are securely hashed using a strong hashing algorithm before being stored in the database. This ensures that even if the database is compromised, the actual passwords are not exposed. At no point is the unhashed password stored.

Token Usage:
Access Tokens: These are generated using JWT and are valid for 8 hours. They must be included in the Authorization header of requests to protected endpoints. Access tokens are blacklisted upon user logout or account deletion to prevent unauthorized access.
Password Reset Tokens: Also generated using JWT, these tokens are valid for 1 hour and are used exclusively for password reset processes. They are blacklisted immediately after use to ensure they cannot be reused.
Blacklisting: Both access tokens and reset tokens are blacklisted when they are no longer valid or have been used. This blacklisting prevents the use of 'logged out' and  invalidated tokens. Blacklisted tokens are automatically removed from the blacklist once they expire.

JWT Security
To maintain the security of JWTs:

Token Expiration: Access tokens expire after 8 hours, and reset tokens expire after 1 hour. This limits the window of opportunity for attackers if a token is compromised.

Best Practices for Storing JWTs:

Store tokens securely: Access tokens should be stored in secure storage mechanisms, such as HTTP-only cookies or secure local storage.
Avoid exposing tokens: Ensure that tokens are not exposed in URLs or other insecure locations that could be intercepted by attackers.
Implement token revocation: Utilize the blacklisting mechanism to revoke tokens upon logout or after they have been used for password resets.
These security measures ensure that user data and authentication mechanisms are well-protected against potential threats.


9. Examples
Sample Requests: Provide curl commands for each endpoint, showing example requests and responses.
Code Samples: Include sample code snippets for integrating the API with different programming languages or tools.
Changelog: Version History
Initial Submission:

The original JournalHub project, submitted as a final boot camp project, was basic, with several logic flaws and security vulnerabilities.
Improvements Made:

JWT Enhancement:

Initially, JWT was only used for generating and verifying tokens. Now, it also serves as a user data delivery system. Consequently, routes that previously required user ID and other info as parameters now extract these directly from the token. The token now includes the user's full name, nickname, and email.
Token Blacklisting:

Previously, Redis was used solely for managing token blacklisting. Now, MongoDB's TTL index handles this, simplifying the system by eliminating the need for Redis. Blacklisted tokens are automatically removed upon expiration.
Account Deletion:

The account deletion process has been enhanced. It now deletes all associated journal entries and blacklists the access token used for the operation.
User Profile:

The registration process has been expanded to include a nickname, and the name field has been updated to "fullName." Additionally, user profiles now include a base64-encoded profile picture stored as a string, with a default image provided.
Password Update:

A new route has been added to allow users to update their passwords, addressing a previous oversight in the user profile update process.
New Features:

Journal Entry Search:

Users can now search through their entries by title and content using indexed text fields in MongoDB.
Public Entries:

Users can mark journal entries as public, making them viewable by anyone. Users can also revert public entries to private at any time.
Mailer Integration:

A mailer system has been added to automatically send emails for registration, profile updates, and password resets. This was implemented using NodeMailer.
Contact Information
For support or inquiries, please contact:

Email: journalhub2@gmail.com
Phone: +234 8162619146 (WAT - West Africa Time)
